name: RDP

on:
  workflow_dispatch:
  # Optional auto-restart schedule (uncomment if you want auto runs)
   schedule:
     - cron: "0 */6 * * *"  # every 6 hours

jobs:
  secure-rdp:
    runs-on: windows-latest
    # GitHub Windows runner max is 360 minutes (6 hours)
    timeout-minutes: 360

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                             -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                             -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "No existing rule"
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User with fixed password (from secret)
        shell: powershell
        env:
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        run: |
          $username = "DR1"
          if (-not $env:RDP_PASSWORD) {
            Write-Error "RDP_PASSWORD secret is not set. Set it in repo secrets."
            exit 1
          }

          # Remove existing user if present (optional cleanup)
          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
              Write-Host "User $username already exists - removing to recreate"
              Remove-LocalUser -Name $username -ErrorAction SilentlyContinue
          }

          $securePass = ConvertTo-SecureString $env:RDP_PASSWORD -AsPlainText -Force
          New-LocalUser -Name $username -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username

          # Do NOT print the password (security). Print only username so you know what to use.
          echo "RDP_USER=$username" >> $env:GITHUB_ENV
          Write-Host "User $username created successfully."

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: (stored in GitHub secret RDP_PASSWORD)"
          Write-Host "==================`n"

          # Keep runner alive until job timeout (or manual cancel)
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Cancel workflow in Actions to terminate"
              Start-Sleep -Seconds 300
          }
